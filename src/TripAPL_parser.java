/* Generated By:JavaCC: Do not edit this line. TripAPL_parser.java */
import java.util.ArrayList;
import java.io.*;
import alice.tuprolog.*;
public class TripAPL_parser implements TripAPL_parserConstants {
    private static int ID = 0;
  static public Agent compile(String filename) throws FileNotFoundException, ParseException {
    return new TripAPL_parser(new FileInputStream(filename)).Program(ID++);
  }
  static public Agent compile(File file) throws FileNotFoundException, ParseException {
    return new TripAPL_parser(new FileInputStream(file)).Program(ID++);
  }
  final public Agent Program(int id) throws ParseException {
    Token t;
    String name;
    BeliefBase bb = null;
    CapabilityBase cb = null;
    GoalBase gb = null;
    PlanBase pb = null;
    GoalPlanningRuleBase gp = null;
    PlanRevisionRuleBase pr = null;
    jj_consume_token(NAME);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      t = jj_consume_token(VAR);
      break;
    case VAL:
      t = jj_consume_token(VAL);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                            name  = t.image;
    jj_consume_token(BELBASE);
    jj_consume_token(COLON);
    bb = beliefs();
    jj_consume_token(GOALBASE);
    jj_consume_token(COLON);
    gb = goals();
    jj_consume_token(CAPBASE);
    jj_consume_token(COLON);
    cb = capbilities();
    jj_consume_token(PLANBASE);
    jj_consume_token(COLON);
    pb = plans();
    jj_consume_token(GP_RULES);
    jj_consume_token(COLON);
    gp = g_rules();
    jj_consume_token(PR_RULES);
    jj_consume_token(COLON);
    pr = p_rules();
     {if (true) return new Agent(name,bb,gb,pb,gp,pr,cb,id);}
    throw new Error("Missing return statement in function");
  }

  final public CapabilityBase capbilities() throws ParseException {
    Capability buffer;
    ArrayList<Capability> result = new ArrayList<Capability>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      buffer = capability();
                           result.add(buffer);
    }
     {if (true) return new CapabilityBase(result);}
    throw new Error("Missing return statement in function");
  }

  final public Capability capability() throws ParseException {
    Atom t;
    Query precondition;
    String name;
    Token nameT;
    Literal literal;
    ArrayList<Literal> postcondition;
    ArrayList<String> arguments = new ArrayList<String>();
    jj_consume_token(LBRACE);
    precondition = query();
    jj_consume_token(RBRACE);
    nameT = jj_consume_token(VAL);
                                                            name = nameT.image;
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAL:
    case VAR:
      t = atom();
                                                                                                     arguments.add(t.toString());
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      t = atom();
                                                                                                                                                          arguments.add(t.toString());
    }
    jj_consume_token(RPAR);
    jj_consume_token(LBRACE);
    postcondition = literals();
    jj_consume_token(RBRACE);
     {if (true) return new Capability(precondition, name, arguments, postcondition);}
    throw new Error("Missing return statement in function");
  }

  final public BeliefBase beliefs() throws ParseException {
    ArrayList<GpredClause> bs = new ArrayList<GpredClause>();
    ArrayList<String> hs = new ArrayList<String>();
    StringBuilder horn;
    VpredClause bufferV;
    boolean isHorn = false;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case LSQA:
      case VAL:
      case VAR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
       isHorn=false;
      bufferV = vpredclause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GIVES:
        jj_consume_token(GIVES);
              horn = new StringBuilder();horn.append(bufferV.toString());isHorn = true; horn.append(" :- ");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PNOT:
          jj_consume_token(PNOT);
                                                                                                                        horn.append("\u005c\u005c+ ");
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        bufferV = vpredclause();
                                                                                                                                                                         horn.append(bufferV.toString());
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
          case SEMICOL:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_4;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
                                                                                                                                                                                                                      horn.append(", ");
            break;
          case SEMICOL:
            jj_consume_token(SEMICOL);
                                                                                                                                                                                                                                                     horn.append("; ");
            break;
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PNOT:
            jj_consume_token(PNOT);
                                                                                                                                                                                                                                                                                  horn.append("\u005c\u005c+ ");
            break;
          default:
            jj_la1[8] = jj_gen;
            ;
          }
          bufferV = vpredclause();
                                                                                                                                                                                                                                                                                                                                   horn.append(bufferV.toString());
        }
                                                                                                                                                                                                                                                                                                                                                                        hs.add(horn.toString());
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      if(!isHorn){bs.add(bufferV);}
      jj_consume_token(PROLOGEND);
    }
     {if (true) return new BeliefBase(hs,bs);}
    throw new Error("Missing return statement in function");
  }

  final public GoalBase goals() throws ParseException {
    Goal buffer;
    ArrayList<Goal> result = new ArrayList<Goal>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case LSQA:
    case VAL:
    case VAR:
      buffer = goal();
                      result.add(buffer);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        buffer = goal();
                                                                     result.add(buffer);
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
     {if (true) return new GoalBase(result);}
    throw new Error("Missing return statement in function");
  }

  final public Goal goal() throws ParseException {
    GpredClause buffer;
    ArrayList<GpredClause> component = new ArrayList<GpredClause>();
    buffer = gpredclause();
                            component.add(buffer);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      jj_consume_token(AND);
      buffer = gpredclause();
                                                                                   component.add(buffer);
    }
     {if (true) return new Goal(component);}
    throw new Error("Missing return statement in function");
  }

  final public GoalPlanningRule g_rule() throws ParseException {
    Goal goal0 = null;
    Query condition;
    SeqPlan plan0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      goal0 = goal();
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(IMPLY);
    condition = query();
    jj_consume_token(VBAR);
    jj_consume_token(LBRACE);
    plan0 = seqPlan();
    jj_consume_token(RBRACE);
                                                                                                             {if (true) return new GoalPlanningRule(goal0,condition,plan0);}
    throw new Error("Missing return statement in function");
  }

  final public PlanRevisionRule p_rule() throws ParseException {
    SeqPlan oldPlan;
    Query condition;
    SeqPlan newPlan;
    jj_consume_token(LBRACE);
    oldPlan = seqPlan();
    jj_consume_token(RBRACE);
    jj_consume_token(IMPLY);
    condition = query();
    jj_consume_token(VBAR);
    jj_consume_token(LBRACE);
    newPlan = seqPlan();
    jj_consume_token(RBRACE);
                                                                                                                {if (true) return new PlanRevisionRule(oldPlan,newPlan,condition);}
    throw new Error("Missing return statement in function");
  }

  final public GoalPlanningRuleBase g_rules() throws ParseException {
    ArrayList<GoalPlanningRule> gs = new ArrayList<GoalPlanningRule>();
    GoalPlanningRule g;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case IMPLY:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      g = g_rule();
                   gs.add(g);
    }
     {if (true) return new GoalPlanningRuleBase(gs);}
    throw new Error("Missing return statement in function");
  }

  final public PlanRevisionRuleBase p_rules() throws ParseException {
    ArrayList<PlanRevisionRule> ps = new ArrayList<PlanRevisionRule>();
    PlanRevisionRule p;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      p = p_rule();
                   ps.add(p);
    }
     {if (true) return new PlanRevisionRuleBase(ps);}
    throw new Error("Missing return statement in function");
  }

  final public PlanBase plans() throws ParseException {
    Plan buffer;
    ArrayList<Plan> plans = new ArrayList<Plan>();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      buffer = plan();
                      plans.add(buffer);
    }
     {if (true) return new PlanBase(plans);}
    throw new Error("Missing return statement in function");
  }

  final public Plan plan() throws ParseException {
    SeqPlan plan;
    jj_consume_token(LBRACE);
    plan = seqPlan();
    jj_consume_token(RBRACE);
                                        {if (true) return new Plan(plan);}
    throw new Error("Missing return statement in function");
  }

  final public SeqPlan seqPlan() throws ParseException {
    BasicPlan buffer;
    ArrayList<BasicPlan> components = new ArrayList<BasicPlan>();
    label_10:
    while (true) {
      buffer = basicplan();
                            components.add(buffer);
      jj_consume_token(SEMICOL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case SEND:
      case Env:
      case LPAR:
      case LSQA:
      case TRUE:
      case NOT:
      case VAL:
      case VAR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_10;
      }
    }
                                                                  {if (true) return new SeqPlan(components);}
    throw new Error("Missing return statement in function");
  }

  final public BasicPlan basicplan() throws ParseException {
    Query testbuffer;
    ArrayList<GpredClause> arguments = new ArrayList<GpredClause>();
    ArrayList<BasicPlan> components = new ArrayList<BasicPlan>();
    BasicPlan buffer;
    VpredClause content;
    VpredClause reply;
    GpredClause argbuffer;
    Token t;
    SeqPlan ifPlan;
    SeqPlan elsePlan;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Env:
      jj_consume_token(Env);
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQA:
      case VAL:
      case VAR:
        argbuffer = aOrl();
                                        arguments.add(argbuffer);
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_11;
          }
          jj_consume_token(COMMA);
          argbuffer = aOrl();
                                                                                                arguments.add(argbuffer);
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
                                                                                                                                       {if (true) return new EnvAction(arguments);}
      break;
    default:
      jj_la1[23] = jj_gen;
      if (jj_2_1(2147483647)) {
        testbuffer = query();
        jj_consume_token(QUSMARK);
                                                                    {if (true) return new TestAction(testbuffer);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEND:
          jj_consume_token(SEND);
          jj_consume_token(LPAR);
          t = jj_consume_token(VAL);
          jj_consume_token(COMMA);
          argbuffer = aOrl();
          jj_consume_token(COMMA);
          content = vpredclause();
          jj_consume_token(COMMA);
          reply = vpredclause();
          jj_consume_token(RPAR);
                                                                                                                {if (true) return new SendAction(t.image, argbuffer.toString(), content, reply);}
          break;
        case VAL:
          t = jj_consume_token(VAL);
          jj_consume_token(LPAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LSQA:
          case VAL:
          case VAR:
            argbuffer = aOrl();
                                               arguments.add(argbuffer);
            label_12:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[20] = jj_gen;
                break label_12;
              }
              jj_consume_token(COMMA);
              argbuffer = aOrl();
                                                                                                       arguments.add(argbuffer);
            }
            break;
          default:
            jj_la1[21] = jj_gen;
            ;
          }
          jj_consume_token(RPAR);
                                                                                                                                              {if (true) return new CapAction(t.image, arguments);}
          break;
        case WHILE:
          jj_consume_token(WHILE);
          jj_consume_token(LPAR);
          testbuffer = query();
          jj_consume_token(RPAR);
          jj_consume_token(LBRACE);
          label_13:
          while (true) {
            buffer = basicplan();
                                                                                  components.add(buffer);
            jj_consume_token(SEMICOL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IF:
            case WHILE:
            case SEND:
            case Env:
            case LPAR:
            case LSQA:
            case TRUE:
            case NOT:
            case VAL:
            case VAR:
              ;
              break;
            default:
              jj_la1[22] = jj_gen;
              break label_13;
            }
          }
          jj_consume_token(RBRACE);
                                                                                                                                 {if (true) return new WhilePlan(components, testbuffer);}
          break;
        case IF:
          jj_consume_token(IF);
          jj_consume_token(LPAR);
          testbuffer = query();
          jj_consume_token(RPAR);
          jj_consume_token(LBRACE);
          ifPlan = seqPlan();
          jj_consume_token(RBRACE);
          jj_consume_token(ELSE);
          jj_consume_token(LBRACE);
          elsePlan = seqPlan();
          jj_consume_token(RBRACE);
                                                                                                                                   {if (true) return new IfPlan(ifPlan, elsePlan, testbuffer);}
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Literal> literals() throws ParseException {
    Literal buffer;
    ArrayList<Literal> result = new ArrayList<Literal>();
    buffer = literal();
                        result.add(buffer);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      buffer = literal();
                                                                          result.add(buffer);
    }
     {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Query query() throws ParseException {
    Query sub0;
    Query sub1;
    boolean isOr;
    if (jj_2_2(2147483647)) {
      sub0 = wff();
      jj_consume_token(AND);
      sub1 = query();
                                                                {if (true) return new wffBinary(false, sub0, sub1);}
    } else if (jj_2_3(2147483647)) {
      sub0 = wff();
      jj_consume_token(OR);
      sub1 = query();
                                                               {if (true) return new wffBinary(true, sub0, sub1);}
    } else if (jj_2_4(2147483647)) {
      sub0 = wff();
                                     {if (true) return sub0;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Query wff() throws ParseException {
    Query sub0;
    Query sub1;
    boolean isOr;
    if (jj_2_5(2147483647)) {
      jj_consume_token(LPAR);
      sub0 = wff();
      jj_consume_token(OR);
      sub1 = query();
      jj_consume_token(RPAR);
                                                                                  {if (true) return new wffBinary(true, sub0, sub1);}
    } else if (jj_2_6(2147483647)) {
      jj_consume_token(LPAR);
      sub0 = wff();
      jj_consume_token(AND);
      sub1 = query();
      jj_consume_token(RPAR);
                                                                                      {if (true) return new wffBinary(false, sub0, sub1);}
    } else if (jj_2_7(2147483647)) {
      jj_consume_token(LPAR);
      sub0 = wff();
      jj_consume_token(RPAR);
                                                                  {if (true) return sub0;}
    } else if (jj_2_8(2147483647)) {
      sub0 = singlequery();
                                                      {if (true) return sub0;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Query singlequery() throws ParseException {
    Query query;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      query = truequery();
                          {if (true) return query;}
      break;
    case LPAR:
    case LSQA:
    case NOT:
    case VAL:
    case VAR:
      query = literal();
                                                                {if (true) return query;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TrueQuery truequery() throws ParseException {
    jj_consume_token(TRUE);
            {if (true) return new TrueQuery();}
    throw new Error("Missing return statement in function");
  }

  final public Literal literal() throws ParseException {
    VpredClause clause;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case LSQA:
    case VAL:
    case VAR:
      clause = vpredclause();
                             {if (true) return new Literal(false, clause);}
      break;
    case NOT:
      jj_consume_token(NOT);
      clause = vpredclause();
                                                                                                   {if (true) return new Literal(true, clause);}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public GpredClause gpredclause() throws ParseException {
    String operator;
    Token t = null;
    ArrayList<GpredClause> arguments = new ArrayList<GpredClause>();
    ArrayList<String> operators = new ArrayList<String>();
    GpredClause buffer;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSQA:
      buffer = list();
                      {if (true) return buffer;}
      break;
    default:
      jj_la1[35] = jj_gen;
      if (jj_2_9(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAL:
        case VAR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VAL:
            t = jj_consume_token(VAL);
            break;
          case VAR:
            t = jj_consume_token(VAR);
            break;
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case LSQA:
        case VAL:
          buffer = gsubClause();
                                                                                                                                      arguments.add(buffer);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
          case SEMICOL:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_15;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
                                                                                                                                                                              operator = ", ";
            break;
          case SEMICOL:
            jj_consume_token(SEMICOL);
                                                                                                                                                                                                               operator = "; ";
            break;
          default:
            jj_la1[32] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PNOT:
            jj_consume_token(PNOT);
                                                                                                                                                                                                                                            operator+="\u005c\u005c+ ";
            break;
          default:
            jj_la1[33] = jj_gen;
            ;
          }
                                                                                                                                                                                                                                                                  operators.add(operator);
          buffer = gsubClause();
                           arguments.add(buffer);
        }
        jj_consume_token(RPAR);
     if(t==null){{if (true) return new GpredClause(null, arguments,operators);}}else{{if (true) return new GpredClause(t.image, arguments,operators);}}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAL:
        case VAR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VAL:
            t = jj_consume_token(VAL);
            break;
          case VAR:
            t = jj_consume_token(VAR);
            break;
          default:
            jj_la1[34] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                {if (true) return new VpredClause(t.image, arguments,operators);}
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public GpredClause gsubClause() throws ParseException {
    Atom predicate;
    String operator;
    ArrayList<GpredClause> arguments = new ArrayList<GpredClause>();
    ArrayList<String> operators = new ArrayList<String>();
    GpredClause buffer;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSQA:
      buffer = list();
                      {if (true) return buffer;}
      break;
    case VAL:
      predicate = val();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case LSQA:
        case VAL:
          buffer = gsubClause();
                                                                                         arguments.add(buffer);
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
          case SEMICOL:
            ;
            break;
          default:
            jj_la1[38] = jj_gen;
            break label_16;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
                                                                                                                                operator = ", ";
            break;
          case SEMICOL:
            jj_consume_token(SEMICOL);
                                                                                                                                                                 operator = "; ";
            break;
          default:
            jj_la1[39] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PNOT:
            jj_consume_token(PNOT);
                                                                                                                                                                                              operator+="\u005c\u005c+ ";
            break;
          default:
            jj_la1[40] = jj_gen;
            ;
          }
                                                                                                                                                                                                                    operators.add(operator);
          buffer = gsubClause();
                                                                                                                                                                                                                                                                     arguments.add(buffer);
        }
        jj_consume_token(RPAR);
                                                                                                                                                                                                                                                                                                    {if (true) return new GpredClause(predicate.toString(),arguments,operators);}
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
                                                                                                                                                                                                                                                                                                                                                                           {if (true) return predicate;}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case LSQA:
      case VAL:
        buffer = gsubClause();
                                   arguments.add(buffer);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
        case SEMICOL:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
                                                                          operator = ", ";
          break;
        case SEMICOL:
          jj_consume_token(SEMICOL);
                                                                                                           operator = "; ";
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PNOT:
          jj_consume_token(PNOT);
                                                                                                                                        operator+="\u005c\u005c+ ";
          break;
        default:
          jj_la1[45] = jj_gen;
          ;
        }
                                                                                                                                                              operators.add(operator);
        buffer = gsubClause();
                                                                                                                                                                                                               arguments.add(buffer);
      }
      jj_consume_token(RPAR);
                                                                                                                                                                                                                                              {if (true) return new GpredClause(null,arguments,operators);}
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VpredClause vpredclause() throws ParseException {
    Token t = null;
    String operator;
    ArrayList<GpredClause> arguments = new ArrayList<GpredClause>();
    ArrayList<String> operators = new ArrayList<String>();
    GpredClause buffer;
    PrologList prologlist;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSQA:
      prologlist = list();
                          {if (true) return prologlist;}
      break;
    default:
      jj_la1[53] = jj_gen;
      if (jj_2_10(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAL:
          t = jj_consume_token(VAL);
          break;
        default:
          jj_la1[47] = jj_gen;
          ;
        }
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case LSQA:
        case VAL:
        case VAR:
          buffer = vsubClause();
                                                                                                                                   arguments.add(buffer);
          break;
        default:
          jj_la1[48] = jj_gen;
          ;
        }
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
          case SEMICOL:
            ;
            break;
          default:
            jj_la1[49] = jj_gen;
            break label_18;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
                                                                                                                                                                          operator = ", ";
            break;
          case SEMICOL:
            jj_consume_token(SEMICOL);
                                                                                                                                                                                                           operator = "; ";
            break;
          default:
            jj_la1[50] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PNOT:
            jj_consume_token(PNOT);
                                                                                                                                                                                                                                        operator+="\u005c\u005c+ ";
            break;
          default:
            jj_la1[51] = jj_gen;
            ;
          }
                                                                                                                                                                                                                                                              operators.add(operator);
          buffer = vsubClause();
                                                                                                                                                                                                                                                                                                               arguments.add(buffer);
        }
        jj_consume_token(RPAR);
     if(t==null){{if (true) return new VpredClause(null, arguments,operators);}}else{{if (true) return new VpredClause(t.image, arguments,operators);}}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAL:
        case VAR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VAL:
            t = jj_consume_token(VAL);
            break;
          case VAR:
            t = jj_consume_token(VAR);
            break;
          default:
            jj_la1[52] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                {if (true) return new VpredClause(t.image, arguments,operators);}
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public GpredClause vsubClause() throws ParseException {
    Atom predicate;
    String operator;
    ArrayList<GpredClause> arguments = new ArrayList<GpredClause>();
    ArrayList<String> operators = new ArrayList<String>();
    GpredClause buffer;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSQA:
      buffer = list();
                       {if (true) return buffer;}
      break;
    case VAL:
      predicate = val();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case LSQA:
        case VAL:
        case VAR:
          buffer = vsubClause();
                                                                                          arguments.add(buffer);
          break;
        default:
          jj_la1[55] = jj_gen;
          ;
        }
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
          case SEMICOL:
            ;
            break;
          default:
            jj_la1[56] = jj_gen;
            break label_19;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
                                                                                                                                 operator = ", ";
            break;
          case SEMICOL:
            jj_consume_token(SEMICOL);
                                                                                                                                                                  operator = "; ";
            break;
          default:
            jj_la1[57] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PNOT:
            jj_consume_token(PNOT);
                                                                                                                                                                                               operator+="\u005c\u005c+ ";
            break;
          default:
            jj_la1[58] = jj_gen;
            ;
          }
                                                                                                                                                                                                                     operators.add(operator);
          buffer = vsubClause();
                                                                                                                                                                                                                                                                      arguments.add(buffer);
        }
        jj_consume_token(RPAR);
                                                                                                                                                                                                                                                                                                     {if (true) return new GpredClause(predicate.toString(),arguments);}
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
                                                                                                                                                                                                                                                                                                                                                                 {if (true) return predicate;}
      break;
    case VAR:
      predicate = var();
                                                                                                                                                                                                                                                                                                                                                                                                           {if (true) return predicate;}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case LSQA:
      case VAL:
      case VAR:
        buffer = vsubClause();
                                   arguments.add(buffer);
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
        case SEMICOL:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_20;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
                                                                          operator = ", ";
          break;
        case SEMICOL:
          jj_consume_token(SEMICOL);
                                                                                                           operator = "; ";
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PNOT:
          jj_consume_token(PNOT);
                                                                                                                                        operator+="\u005c\u005c+ ";
          break;
        default:
          jj_la1[63] = jj_gen;
          ;
        }
                                                                                                                                                              operators.add(operator);
        buffer = vsubClause();
                                                                                                                                                                                                               arguments.add(buffer);
      }
      jj_consume_token(RPAR);
                                                                                                                                                                                                                                              {if (true) return new VpredClause(null,arguments,operators);}
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Atom val() throws ParseException {
    Token t;
    t = jj_consume_token(VAL);
              {if (true) return new Atom(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Atom var() throws ParseException {
    Token t;
    t = jj_consume_token(VAR);
              {if (true) return new Atom(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Atom atom() throws ParseException {
    Atom a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      a = var();
                {if (true) return a;}
      break;
    case VAL:
      a = val();
                                         {if (true) return a;}
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PrologList list() throws ParseException {
    GpredClause buffer = null;
    GpredClause finalPart = null;
    ArrayList<GpredClause> arguments = new ArrayList<GpredClause>();
    jj_consume_token(LSQA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case LSQA:
    case VAL:
    case VAR:
      buffer = vsubClause();
                                   arguments.add(buffer);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[66] = jj_gen;
          break label_21;
        }
        jj_consume_token(COMMA);
        buffer = vsubClause();
                                                                                           arguments.add(buffer);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VBAR:
        jj_consume_token(VBAR);
        finalPart = vsubClause();
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
    jj_consume_token(RSQA);
     {if (true) return new PrologList(finalPart, arguments);}
    throw new Error("Missing return statement in function");
  }

  final public GpredClause aOrl() throws ParseException {
    GpredClause x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAL:
    case VAR:
      x = atom();
      break;
    case LSQA:
      x = list();
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                               {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_3_1() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(QUSMARK)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(VBAR)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(LSQA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    if (jj_scan_token(RSQA)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) jj_scanpos = xsp;
    if (jj_scan_token(LPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(PNOT)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(PNOT)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(VAL)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(PNOT)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public TripAPL_parserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[70];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x10000,0x0,0x2000,0x40000000,0x0,0x2002000,0x2002000,0x0,0x0,0x2000,0x40000000,0x40000,0x10000,0x10000,0x10000,0x10000,0x58300000,0x2000,0x0,0x2000,0x0,0x58300000,0x10000000,0x8300000,0x2000,0x40000000,0x40000000,0x0,0x0,0x40000000,0x2002000,0x2002000,0x0,0x0,0x0,0x0,0x40000000,0x2002000,0x2002000,0x0,0x40000000,0x40000000,0x2002000,0x2002000,0x0,0x40000000,0x0,0x40000000,0x2002000,0x2002000,0x0,0x0,0x0,0x0,0x40000000,0x2002000,0x2002000,0x0,0x40000000,0x40000000,0x2002000,0x2002000,0x0,0x40000000,0x0,0x2000,0x0,0x40000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x600,0x0,0x600,0x0,0x601,0x100,0x0,0x0,0x100,0x80,0x0,0x601,0x0,0x0,0x40,0x0,0x0,0x631,0x0,0x601,0x0,0x601,0x631,0x0,0x200,0x0,0x631,0x621,0x600,0x600,0x201,0x0,0x0,0x100,0x600,0x1,0x600,0x201,0x0,0x0,0x100,0x0,0x201,0x0,0x0,0x100,0x201,0x200,0x601,0x0,0x0,0x100,0x600,0x1,0x600,0x601,0x0,0x0,0x100,0x0,0x601,0x0,0x0,0x100,0x601,0x600,0x0,0x4,0x601,0x601,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TripAPL_parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TripAPL_parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TripAPL_parserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TripAPL_parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TripAPL_parserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TripAPL_parser(TripAPL_parserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TripAPL_parserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 70; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
