
options
{
  LOOKAHEAD= 3;

  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(TripAPL_parser)
import Agent.*;
import java.util.ArrayList;
import alice.tuprolog.*;
public class TripAPL_parser
{
 public static void main(String args[]) throws ParseException
 {
 TripAPL_parser parser = new TripAPL_parser(System.in);
 }
}
PARSER_END(TripAPL_parser)
SKIP :
{
        " "
    |   "\r"
    |   "\t"
    |   "\n"
    |   "\r\n"
}
TOKEN :
{
      <NAME: "Name">
    | <CAPBASE: "Capability Base">
    | <BELBASE: "Belief Base">
    | <GOALBASE: "Goal Base">
    | <PLANBASE: "Plan Base">
    | <GP_RULES: "Goal Planning Rule Base">
    | <PR_RULES: "Plan revision Rule Base">
    | <COMMA: ",">
    | <COLON: ":">
    | <PROLOGEND: ".">
    | <LBRACE: "{">
    | <RBRACE: "}">
    | <AND: "and">
    | <OR: "or">
    | <IF: "if">
    | <WHILE: "while">
    | <DO: "do">
    | <THEN: "then">
    | <ELSE: "else">
    | <SEMICOL: ";">
    | <NONE: "None">
    | <SEND: "Send">
    | <JAVA: "Java">
    | <LPAR: "(">
    | <RPAR: ")">
    | <VBAR: "|">
    | <QUSMARK: "?">
    | <TRUE: "true">
    | <NOT: "not">
    | <IMPLY: "<-">
    | <GIVES: ":-">
    | <VAL: (((["a"-"z"]) (["A"-"Z"] | ["a"-"z"] | "_" | ["0" - "9"])*) | (["0" - "9"])+)>
    | <VAR: (["A"-"Z"] | "_") (["A"-"Z"] | ["a"-"z"] | "_" | ["0" - "9"])*>
    | <ATOM: (<VAL> | <VAR>)>
}




Agent Program():
{
    Token t;
    String name;
    BeliefBase bb = null;
    CapabilityBase cb = null;
    GoalBase gb = null;
    PlanBase pb = null;
    GoalPlanningRuleBase gp = null;
    PlanRevisionRuleBase pr = null;
}
{
    <NAME> <COLON> (t = <ATOM>) {name  = t.image;}
    <BELBASE> <COLON> (bb = beliefs())?
    <GOALBASE> <COLON> (gb = goals())?
    <CAPBASE> <COLON> cb = capbilities()
    <PLANBASE> <COLON> (pb = plans())?
    <GP_RULES> <COLON> (gp = g_rules())?
    <PR_RULES> <COLON> (pr = r_rules())?
    {return new Agent.Agent(name,bb,cb,gb,pb,gp,pr);}
}

CapabilityBase capbilities():
{
    Capability buffer;
    ArrayList<Capability> result = new ArrayList<Capability>();
}
{
    (buffer = capability(){result.add(buffer);})*
    {return new CapabilityBase(result);}
}

Capability capability():
{
    Token t;
    Query precondition;
    String name;
    ArrayList<Literal> postcondition;
    ArrayList<String> arguments;
}
{
    <LBRACE> precondition = query() <RBRACE> name = ident() <LPAR> (t = <ATOM> {arguments.add(t.image);})? (<COMMA> t = <ATOM> {arguments.add(t.image);})* <RPAR> <LBRACE> literals = literals() <RBRACE>
    {return new Capability(precondition, name, arguments, postcondition);}
}

BeliefBase beliefs():
{
    ArrayList<GpredClause> bs = new ArrayList<Belief>();
    GpredClause buffer;
    ArrayList<String> hs = new ArrayList<String>();
    String buffer0;
}
{
    buffer = belief() {bs.add(buffer);} (<COMMA> buffer = belief() {bs.add(buffer);})*
    {return bs;}
}


GpredClause belief():
{
    String x = null;
}
{
    x = atom() <PROLOGEND>     | (atom() <GIVES> literals() <PROLOGEND> )
    {return new Belief(x);}
}

GoalBase goals():
{
    Goal buffer;
    ArrayList<Goal> result = new ArrayList<Goal>();
}
{
    buffer = goal() {result.add(buffer);} (<COMMA> goal() {result.add(buffer);})*
    {return result;}
}

Goal goal():
{
    String buffer;
    ArrayList<String> component = new ArrayList<String>();
}
{
    buffer = atom() {component.add(buffer);} (<AND> atom() {component.add(buffer);})*
    {return new Goal(component);}
}

ArrayList<Executable> plans():
{
    Executable buffer;
    ArrayList<Executable> result = new ArrayList<Executable>();
}
{
    buffer = plan() (<COMMA> buffer = plan())*
    {return result;}
}

Executable plan():
{
    Executable result;
}
{
    result = basicaction()
    | result = composedplan()
    | result = plan2()
    {return result;}
}

seqPlan plan2():   //For elimination of left recursion, part of composed plan
{
    Executable buffer1;
    Executable buffer2;
}
{
    (buffer1 = basicaction() <SEMICOL> buffer2 = plan()) | (buffer1 = composedplan() <SEMICOL> buffer2 = plan())
    {return new seqPlan(buffer1, buffer2);}
}
BasicAction basicaction():
{
    String par1;
    String par2;
    String par3;
    BasicAction result;
}
{
    (<NONE> {result = new BasicAction(0,null,null,null);})
    | (par1 = atom() {result = new BasicAction(4,par1,null,null);})
    | (<SEND> <LPAR> par1 = iv() <COMMA> par2 = iv() <COMMA> par3 = atom() <RPAR> {result = new BasicAction(2,par1,par2,par3);})
    | (<JAVA> <LPAR> par1 = ident() <COMMA> par2 = atom() <COMMA> par3 = var() <RPAR> {result = new BasicAction(3,par1,par2,par3);})
    | (par1 = Atom() {result = new BasicAction(1,par1,null,null);})
    {return result;}
}

Executable composedplan():
{
    WFF bufferCond;
    Executable buffer1;
    Executable buffer2 = null;
    Executable result;
}
{
    (<IF> bufferCond = wff() <THEN> buffer1 = plan() (<ELSE> buffer2 = plan())? {result = new condPlan(bufferCond, buffer1, buffer2);})
    | (<WHILE> bufferCond = query() <DO> buffer1 = plan() {result = new whilePlan(bufferCond, buffer1);})
    {return result;}
}

ArrayList<PG> g_rules():
{
    PG buffer;
    ArrayList<PG> result = new ArrayList<PG>();
}
{
    buffer = g_rule() {result.add(buffer);} (<COMMA> buffer = g_rule() {result.add(buffer);})*
    {return result;}
}

PG g_rule():
{
    String atom = null;
    WFF query;
    Executable plan;
}
{
    (atom = atom())? <IMPLY> query = query() <VBAR> plan = plan()
    {return new PG(atom,query,plan);}
}

ArrayList<PR> r_rules():
{
    PR buffer;
    ArrayList<PR> result = new ArrayList<PR>();
}
{
    buffer = r_rule() {result.add(buffer);} (<COMMA> buffer = r_rule() {result.add(buffer);})*
    {return result;}
}

PR r_rule():
{
    Executable plan1;
    WFF query;
    Executable plan2;
}
{
    plan1 = plan() <IMPLY> query = query() <VBAR> plan2 = plan()
    {return new PR(plan1,query,plan2);}
}

ArrayList<Literal> literals():
{
    Literal buffer;
    ArrayList<Literal> result = new ArrayList<Literal>();
}
{
    buffer = literal() {result.add(buffer);} (<COMMA> buffer = literal() {result.add(buffer);})*
    {return result;}
}






Query query():
{
    Query sub0;
    Query sub1;
    boolean isOr;
}
{
    (sub0 = singlequery() {return sub0;})
    | (<LPAR> sub0 = singlequery() ((<OR> sub1 = singlequery() <RPAR> {return new wffBinary(true, sub0, sub1);}) |
    (<AND> sub1 = singlequery() <RPAR> {return new wffBinary(false, sub0, sub1);})))
}

Query singlequery():
{
    Query query;
}
{
    (query = truequery() {return query;}) | (query = literal() {return query;})
}

TrueQuery truequery():
{
}
{
    <TRUE> {return new TrueQuery();}
}


Literal literal():
{
    VpredClause clause;
}
{
    (clause = vpredclause() {return new Literal(false, clause);}) | (<NOT> clause = vpredclause() {return new Literal(true, clause);})
}

GpredClause gpredclause():
{
    Token t;
    ArrayList<Atom> arguments = new ArrayList<Atom>();
    Atom buffer;
}
{
    t = <VAL> <LPAR> (buffer = val() {arguments.add(buffer);} )? (<COMMA> buffer = val() {arguments.add(buffer);})* <RPAR>
    {return new GpredClause(t.image, arguments);}
}

VpredClause vpredclause():
{
    Token t;
    ArrayList<Atom> arguments = new ArrayList<Atom>();
    Atom buffer;
}
{
    t = <VAL> <LPAR> (buffer = atom() {arguments.add(buffer);} )? (<COMMA> buffer = atom() {arguments.add(buffer);})* <RPAR>
    {return new VpredClause(t.image, arguments);}
}











Atom val():
{
    Token t;
}
{
    t = <VAL>{return new Atom(t.image);}
}

Atom var():
{
    Token t;
}
{
    t = <VAR>{return new Atom(t.image);}
}

Atom atom():
{
    Atom a;
}
{
    a = var() | a = val() {return a;}
}