Name: Buyer
Belief Base:
    pocket(20).
    holding(0).
    stock(pen,0).
    enough(Item) :- price(Item, Price), pocket(Pocket), geq(Pocket, Price).
    stock(pencil,0).
Goal Base:
    query(),
    buy()
Capability Base:
    {
        received(inform, Saler, price(pen, X), channel(1)) and received(inform, Saler, price(pencil, Y), channel(1))
    }
    getPrice(Saler)
    {
        not received(inform, Saler, is(saler), channel(1)), not received(inform, Saler, price(pen, X), channel(1)), not received(inform, Saler, price(pencil, Y), channel(1))
        , price(pen, X), price(pencil, Y), saler(Saler), available(pen), available(pencil)
    }

    {
        true
    }
    notAvailable(Item)
    {
        not available(Item), not received(inform, Saler, no(Item), channel(1))
    }

    {price(X,A) and pocket(Pocket) and holding(Holding) and sub(Pocket, A, NPocket) and sum(Holding,A,NHolding) and geq(NPocket, 0)}
    buy(X)
    {not pocket(Pocket), not holding(Holding), pocket(NPocket), holding(NHolding)}

    {received(inform, Saler, sale(X), channel(1)) and holding(Holding) and price(X, Price) and
    sub(Holding, Price, NHolding) and stock(X,Count) and sum(Count, 1, NCount)}
    pay(X,Saler)
    {not received(inform, Saler, sale(X), channel(1)), not holding(Holding), not stock(X,Count),holding(NHolding), stock(X,NCount)}

    {true}
    deleteSaler(Saler)
    {not received(inform, Saler, no(pen), channel(1)), not received(inform, Saler, no(pencil), channel(1)), not saler(Saler)}

    {true}
    deleteDuplicated(Saler)
    {not received(inform, Saler, is(saler),channel(1))}

    {price(X,A) and pocket(Pocket) and holding(Holding) and sum(Pocket, A, NPocket) and sub(Holding,A,NHolding)}
    putBack(X)
    {not pocket(Pocket), not holding(Holding), pocket(NPocket), holding(NHolding)}
Plan Base:


Goal Planning Rule Base:
    {
        query()
    }
    <- true |
    {
        while(not received(inform, Saler, is(saler), channel(1))){
            Send(query, ams, is(saler), channel(1));
        };
        received(inform, Saler, is(saler), channel(1))?;
        Send(query, Saler, price(), channel(1));
        getPrice(Saler);
    }


    <- received(inform, Saler, is(saler),channel(1)) and saler(Saler) |
    {
        deleteDuplicated(Saler);
    }


    <- received(inform, Saler, no(Item), channel(1)) |
    {
        notAvailable(Item);
    }

    <- saler(Saler) and not received(inform, Saler, no(Item), channel(1)) and available(Item) and enough(Item) |
    {
        buy(Item);
        Send(query, Saler, buy(Item), channel(1));
        pay(Item,Saler);
    }


    {
        buy()
    }
    <-  (pocket(Pocket) and holding(Holding) and sum(Pocket, Holding, Total) and eql(Total,0)) or (received(inform, Saler, no(pen), channel(1)) and received(inform, Saler, no(pencil), channel(1))) |
    {
        deleteSaler(Saler);
    }

Plan Revision Rule Base:



{
    pay(Item,Saler);
}
<- (received(inform, Saler, no(Item), channel(1)) or not available(Item) )|
{
    putBack(Item);
}


{
    buy(Item);
    Send(query, Saler, buy(Item), channel(1));
    pay(Item,Saler);
}
<- (price(Item,Price) and (pocket(Pocket) and les(Pocket,Price))) |
{
    putBack(Item);
}