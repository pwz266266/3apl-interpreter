Name: Buyer
Belief Base:
    pocket(20).
    holding(0).
    stock(pen,0).
    stock(pencil,0).
Goal Base:
    query(),
    buy()
Capability Base:
    {
        (received(inform, Saler, price(pen, X), channel(1)) and received(inform, Saler, price(pencil, Y), channel(1)))
    }
    getPrice(Saler)
    {
        not received(inform, Saler, is(saler), channel(1)), not received(inform, Saler, price(pen, X), channel(1)), not received(inform, Saler, price(pencil, Y), channel(1))
        , price(pen, X), price(pencil, Y), saler(Saler)
    }

    {(price(X,A) and (pocket(Pocket) and (holding(Holding) and (sub(Pocket, A, NPocket) and (sum(Holding,A,NHolding) and geq(NPocket, 0))))))}
    buy(X)
    {not pocket(Pocket), not holding(Holding), pocket(NPocket), holding(NHolding), buying(X)}

    {(received(inform, Saler, sale(X), channel(1)) and (holding(Holding) and (price(X, Price) and
    (sub(Holding, Price, NHolding) and (stock(X,Count) and sum(Count, 1, NCount))))))}
    pay(X,Saler)
    {not received(inform, Saler, sale(X), channel(1)), not holding(Holding), not stock(X,Count), not buying(X),holding(NHolding), stock(X,NCount)}

    {true}
    deleteSaler(Saler)
    {not received(inform, Saler, no(pen), channel(1)), not received(inform, Saler, no(pencil), channel(1)), not saler(Saler)}

    {true}
    deleteDuplicated(Saler)
    {not received(inform, Saler, is(saler),channel(1))}

    {(price(X,A) and (pocket(Pocket) and (holding(Holding) and (sum(Pocket, A, NPocket) and sub(Holding,A,NHolding)))))}
    putBack(X)
    {not pocket(Pocket), not holding(Holding), pocket(NPocket), holding(NHolding), not buying(X)}
Plan Base:


Goal Planning Rule Base:
    {
        query()
    }
    <- true |
    {
        while(not received(inform, Saler, is(saler), channel(1))){
            Send(query, ams, is(saler), channel(1));
        };
        Test: received(inform, Saler, is(saler), channel(1));
        Send(query, Saler, price(), channel(1));
        getPrice(Saler);
    }


    <- (received(inform, Saler, is(saler),channel(1)) and saler(Saler)) |
    {
        deleteDuplicated(Saler);
    }


    <- (saler(Saler) and (not received(inform, Saler, no(pencil), channel(1)) and (not buying(pencil) and (pocket(Pocket) and (price(pencil, Price) and geq(Pocket, Price)))))) |
    {
        buy(pencil);
        Send(query, Saler, buy(pencil), channel(1));
        pay(pencil,Saler);
    }


    <- (saler(Saler) and (not received(inform, Saler, no(pen), channel(1)) and (not buying(pen) and (pocket(Pocket) and (price(pen, Price) and geq(Pocket, Price)))))) |
    {
        buy(pen);
        Send(query, Saler, buy(pen), channel(1));
        pay(pen,Saler);
    }

    {
        buy()
    }
    <-  ((pocket(Pocket) and (holding(Holding) and (sum(Pocket, Holding, Total) and eql(Total,0)))) or (received(inform, Saler, no(pen), channel(1)) and received(inform, Saler, no(pencil), channel(1)))) |
    {
        deleteSaler(Saler);
    }

Plan Revision Rule Base:
{
    pay(pen,Saler);
}
<- received(inform, Saler, no(pen), channel(1)) |
{
    putBack(pen);
}


{
    pay(pencil,Saler);
}
<- received(inform, Saler, no(pencil), channel(1)) |
{
    putBack(pencil);
}

{
    buy(pen);
    Send(query, Saler, buy(pen), channel(1));
    pay(pen,Saler);
}
<- (price(pen,Price) and (pocket(Pocket) and les(Pocket,Price))) |
{
    putBack(pen);
}

{
    buy(pencil);
    Send(query, Saler, buy(pencil), channel(1));
    pay(pencil,Saler);
}
<- (price(pencil,Price) and (pocket(Pocket) and les(Pocket,Price))) |
{
    putBack(pencil);
}