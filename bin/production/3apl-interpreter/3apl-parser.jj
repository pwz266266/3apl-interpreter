
options
{
  LOOKAHEAD= 3;

  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(TripAPL_parser)
import java.util.ArrayList;
import java.io.*;
import alice.tuprolog.*;
public class TripAPL_parser
{
    private static int ID = 0;
  static public Agent compile(String filename) throws FileNotFoundException, ParseException {
    return new TripAPL_parser(new FileInputStream(filename)).Program(ID++);
  }
}
PARSER_END(TripAPL_parser)
SKIP :
{
        " "
    |   "\r"
    |   "\t"
    |   "\n"
    |   "\r\n"
}
TOKEN :
{
      <NAME: "Name">
    | <CAPBASE: "Capability Base">
    | <BELBASE: "Belief Base">
    | <GOALBASE: "Goal Base">
    | <PLANBASE: "Plan Base">
    | <GP_RULES: "Goal Planning Rule Base">
    | <PR_RULES: "Plan Revision Rule Base">
    | <COMMA: ",">
    | <COLON: ":">
    | <PROLOGEND: ".">
    | <LBRACE: "{">
    | <RBRACE: "}">
    | <AND: "and">
    | <OR: "or">
    | <IF: "if">
    | <WHILE: "while">
    | <DO: "do">
    | <THEN: "then">
    | <ELSE: "else">
    | <SEMICOL: ";">
    | <NONE: "None">
    | <SEND: "Send">
    | <JAVA: "Java">
    | <TEST: "Test:">
    | <LPAR: "(">
    | <RPAR: ")">
    | <VBAR: "|">
    | <QUSMARK: "?">
    | <TRUE: "true">
    | <NOT: "not">
    | <IMPLY: "<-">
    | <GIVES: ":-">
    | <PNOT: "\\+">
    | <VAL: (((["a"-"z"]) (["A"-"Z"] | ["a"-"z"] | "_" | ["0" - "9"])*) | (("-")? ((["0" - "9"]|"."))+))>
    | <VAR: ((["A"-"Z"] | "_") (["A"-"Z"] | ["a"-"z"] | "_" | ["0" - "9"])*)>
}





Agent Program(int id):
{
    Token t;
    String name;
    BeliefBase bb = null;
    CapabilityBase cb = null;
    GoalBase gb = null;
    PlanBase pb = null;
    GoalPlanningRuleBase gp = null;
    PlanRevisionRuleBase pr = null;
}
{
    <NAME> <COLON> (t = <VAR> | t = <VAL>) {name  = t.image;}
    <BELBASE> <COLON> bb = beliefs()
    <GOALBASE> <COLON> gb = goals()
    <CAPBASE> <COLON> cb = capbilities()
    <PLANBASE> <COLON> pb = plans()
    <GP_RULES> <COLON> gp = g_rules()
    <PR_RULES> <COLON> pr = p_rules()
    {return new Agent(name,bb,gb,pb,gp,pr,cb,id);}
}

CapabilityBase capbilities():
{
    Capability buffer;
    ArrayList<Capability> result = new ArrayList<Capability>();
}
{
    (buffer = capability(){result.add(buffer);})*
    {return new CapabilityBase(result);}
}

Capability capability():
{
    Atom t;
    Query precondition;
    String name;
    Token nameT;
    Literal literal;
    ArrayList<Literal> postcondition;
    ArrayList<String> arguments = new ArrayList<String>();
}
{
    <LBRACE> precondition = query() <RBRACE> nameT = <VAL> {name = nameT.image;} <LPAR> (t = atom() {arguments.add(t.toString());})? (<COMMA> t = atom() {arguments.add(t.toString());})* <RPAR> <LBRACE> postcondition = literals() <RBRACE>
    {return new Capability(precondition, name, arguments, postcondition);}
}

BeliefBase beliefs():
{
    ArrayList<GpredClause> bs = new ArrayList<GpredClause>();
    ArrayList<String> hs = new ArrayList<String>();
    StringBuilder horn;
    GpredClause bufferG;
    VpredClause bufferV;
    Literal bufferL;
}
{
     (bufferG = gpredclause() <PROLOGEND> {bs.add(bufferG);} |
     ("Horn Clause:" {horn = new StringBuilder();}  bufferL = literal() {horn.append(bufferL.toString());} <GIVES> {horn.append(" :- ");} (<PNOT> {horn.append("\\+ ");} )? bufferL = literal(){horn.append(bufferL.toString());} ((<COMMA> {horn.append(", ");}| <SEMICOL>{horn.append("; ");}) (<PNOT>{horn.append("\\+ ");})? bufferL = literal() {horn.append(bufferL.toString());})* <PROLOGEND> {hs.add(horn.toString());}))*
    {return new BeliefBase(hs,bs);}
}


GoalBase goals():
{
    Goal buffer;
    ArrayList<Goal> result = new ArrayList<Goal>();
}
{
    (buffer = goal() {result.add(buffer);} (<COMMA> buffer = goal() {result.add(buffer);})*)?
    {return new GoalBase(result);}
}

Goal goal():
{
    GpredClause buffer;
    ArrayList<GpredClause> component = new ArrayList<GpredClause>();
}
{
    buffer = gpredclause() {component.add(buffer);} (<AND> buffer = gpredclause() {component.add(buffer);})*
    {return new Goal(component);}
}



GoalPlanningRule g_rule():
{
    Goal goal0 = null;
    Query condition;
    SeqPlan plan0;
}
{
   (<LBRACE> goal0 = goal() <RBRACE> )? <IMPLY> condition = query() "|" <LBRACE> plan0 = seqPlan() <RBRACE> {return new GoalPlanningRule(goal0,condition,plan0);}
}


PlanRevisionRule p_rule():
{
    SeqPlan oldPlan;
    Query condition;
    SeqPlan newPlan;
}
{
   <LBRACE> oldPlan = seqPlan() <RBRACE> <IMPLY> condition = query() "|" <LBRACE> newPlan = seqPlan() <RBRACE> {return new PlanRevisionRule(oldPlan,newPlan,condition);}
}

GoalPlanningRuleBase g_rules():
{
    ArrayList<GoalPlanningRule> gs = new ArrayList<GoalPlanningRule>();
    GoalPlanningRule g;
}
{
    (g = g_rule() {gs.add(g);})*
    {return new GoalPlanningRuleBase(gs);}
}

PlanRevisionRuleBase p_rules():
{
    ArrayList<PlanRevisionRule> ps = new ArrayList<PlanRevisionRule>();
    PlanRevisionRule p;
}
{
    (p = p_rule() {ps.add(p);})*
    {return new PlanRevisionRuleBase(ps);}
}



PlanBase plans():
{
    Plan buffer;
    ArrayList<Plan> plans = new ArrayList<Plan>();
}
{
    (buffer = plan() {plans.add(buffer);})*
    {return new PlanBase(plans);}
}

Plan plan():
{
    SeqPlan plan;
}
{
    <LBRACE> plan = seqPlan() <RBRACE> {return new Plan(plan);}
}


SeqPlan seqPlan():
{
    BasicPlan buffer;
    ArrayList<BasicPlan> components = new ArrayList<BasicPlan>();
}
{
     (buffer = basicplan() {components.add(buffer);} <SEMICOL>)+ {return new SeqPlan(components);}
}

BasicPlan basicplan():
{
    Query testbuffer;
    ArrayList<Atom> arguments = new ArrayList<Atom>();
    ArrayList<BasicPlan> components = new ArrayList<BasicPlan>();
    BasicPlan buffer;
    VpredClause content;
    VpredClause reply;
    Atom argbuffer;
    Token t;
    SeqPlan ifPlan;
    SeqPlan elsePlan;

}
{
    (<JAVA> <LPAR> ((argbuffer = atom() {arguments.add(argbuffer);}) (<COMMA>argbuffer = atom() {arguments.add(argbuffer);})*)? <RPAR> {return new JavaAction(arguments);})
    | <TEST> (testbuffer = query() {return new TestAction(testbuffer); } )
    | (<SEND> <LPAR>t = <VAL>"," argbuffer = atom() "," content = vpredclause() "," reply = vpredclause()<RPAR>{return new SendAction(t.image, argbuffer.toString(), content, reply);})
    | ( t = <VAL> <LPAR> ((argbuffer = atom() {arguments.add(argbuffer);}) (<COMMA>argbuffer = atom() {arguments.add(argbuffer);})*)? <RPAR> {return new CapAction(t.image, arguments);})
    | (<WHILE> <LPAR> testbuffer = query() <RPAR> <LBRACE> (buffer = basicplan() {components.add(buffer);} <SEMICOL>)+ <RBRACE> {return new WhilePlan(components, testbuffer);} )
    | (<IF> <LPAR> testbuffer = query() <RPAR> <LBRACE> ifPlan = seqPlan() <RBRACE> <ELSE> <LBRACE> elsePlan = seqPlan() <RBRACE> {return new IfPlan(ifPlan, elsePlan, testbuffer);})
}







ArrayList<Literal> literals():
{
    Literal buffer;
    ArrayList<Literal> result = new ArrayList<Literal>();
}
{
    buffer = literal() {result.add(buffer);} (<COMMA> buffer = literal() {result.add(buffer);})*
    {return result;}
}





Query query():
{
    Query sub0;
    Query sub1;
    boolean isOr;
}
{
    (sub0 = singlequery() {return sub0;})
    | (<LPAR> sub0 = query() ((<OR> sub1 = query() <RPAR> {return new wffBinary(true, sub0, sub1);}) |
    (<AND> sub1 = query() <RPAR> {return new wffBinary(false, sub0, sub1);})))
}


Query singlequery():
{
    Query query;
}
{
    (query = truequery() {return query;}) | (query = literal() {return query;})
}


TrueQuery truequery():
{
}
{
    <TRUE> {return new TrueQuery();}
}


Literal literal():
{
    VpredClause clause;
}
{
    (clause = vpredclause() {return new Literal(false, clause);}) | (<NOT> clause = vpredclause() {return new Literal(true, clause);})
}


GpredClause gpredclause():
{
    Token t;
    ArrayList<GpredClause> arguments = new ArrayList();
    GpredClause buffer;
}
{
    t = <VAL> <LPAR> (buffer = gsubClause() {arguments.add(buffer);} )? (<COMMA> buffer = gsubClause() {arguments.add(buffer);})* <RPAR>
    {return new GpredClause(t.image, arguments);}
}

GpredClause gsubClause():
{
    Atom predicate;
    ArrayList<GpredClause> arguments = new ArrayList();
    GpredClause buffer;
}
{
    predicate = val() ("(" (buffer = gsubClause() {arguments.add(buffer);} )? (<COMMA> buffer = gsubClause() {arguments.add(buffer);})* ")" {return new GpredClause(predicate.toString(),arguments);} )? {return predicate;}
}

VpredClause vpredclause():
{
    Token t;
    ArrayList<GpredClause> arguments = new ArrayList();
    GpredClause buffer;
}
{
    t = <VAL> <LPAR> (buffer = vsubClause() {arguments.add(buffer);} )? (<COMMA> buffer = vsubClause() {arguments.add(buffer);})* <RPAR>
    {return new VpredClause(t.image, arguments);}
}

GpredClause vsubClause():
{
    Atom predicate;
    ArrayList<GpredClause> arguments = new ArrayList();
    GpredClause buffer;
}
{
    (predicate = val() ("(" (buffer = vsubClause() {arguments.add(buffer);} )? (<COMMA> buffer = vsubClause() {arguments.add(buffer);})*  ")"{return new GpredClause(predicate.toString(),arguments);})? {return predicate;}) | (predicate = var() {return predicate;})
}

Atom val():
{
    Token t;
}
{
    t = <VAL>{return new Atom(t.image);}
}


Atom var():
{
    Token t;
}
{
    t = <VAR>{return new Atom(t.image);}
}


Atom atom():
{
    Atom a;
}
{
    (a = var() {return a;})| (a = val() {return a;})
}